{"version":3,"sources":["Square.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","row","col","board","cellCounter","i","columns","j","push","this","renderSquare","key","squares","createBoard","React","Component","Game","publishMove","index","piece","state","turn","setState","whosTurn","checkForWinner","onMakeMove","console","log","pubnub","publish","message","channel","gameChannel","possibleCombinations","length","a","b","c","announceWinner","counter","gameOver","newRound","winner","pieces","xScore","oScore","title","isRoomCreator","Swal","fire","position","allowOutsideClick","text","confirmButtonColor","width","customClass","heightAuto","popup","confirmButton","showCancelButton","cancelButtonColor","cancelButtonText","confirmButtonText","cancelButton","then","result","reset","endGame","Array","fill","myTurn","addListener","msg","status","App","onPressJoin","e","input","inputPlaceholder","padding","joinRoom","roomId","lobbyChannel","hereNow","channels","response","totalOccupancy","subscribe","withPresence","notRoomCreator","catch","error","onPressCreate","shortid","generate","substring","isDisabled","isPlaying","unsubscribe","PubNub","publishKey","subscribeKey","close","disabled","xUsername","oUsername","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b71513bc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = props => ( \r\n  <button className={`square`} onClick={props.onClick}>\r\n    {props.value}\r\n  </button>\r\n);\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends React.Component {\r\n  // Create the 3 x 3 board\r\n  createBoard(row, col) {\r\n    const board = [];\r\n    let cellCounter = 0;\r\n\r\n    for (let i = 0; i < row; i += 1) {\r\n      const columns = [];\r\n      for (let j = 0; j < col; j += 1) {\r\n        columns.push(this.renderSquare(cellCounter++));\r\n      }\r\n      board.push(<div key={i} className=\"board-row\">{columns}</div>);\r\n    }\r\n\r\n    return board;\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.createBoard(3, 3)}</div>;\r\n  }\r\n}\r\n\r\nexport default Board;","import React from \"react\";\r\nimport Board from \"./Board.js\"\r\nimport PubNub from 'pubnub';\r\nimport Swal from \"sweetalert2\";  \r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(9).fill(''), // 3x3 board\r\n            xScore: 0,\r\n            oScore: 0,\r\n            whosTurn: this.props.myTurn // Player X goes first\r\n        };\r\n\r\n        this.turn = 'X';\r\n        this.gameOver = false;\r\n        this.counter = 0; //Game ends in a tie when counter is 9\r\n\r\n    }\r\n\r\n    //runs after first render\r\n    componentDidUpdate(){\r\n        this.props.pubnub.addListener({\r\n            message: (msg) => {\r\n                //checks to make sure only the current player listens to this\r\n                if (msg.message.turn === this.props.piece){\r\n                    this.publishMove(msg.message.index, msg.message.piece);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    publishMove = (index, piece) => {\r\n        const squares = this.state.squares;\r\n\r\n        squares[index] = piece;\r\n        this.turn = (squares[index] === 'X')? 'O' : 'X';\r\n\r\n        this.setState({\r\n            squares: squares,\r\n            whosTurn: !this.state.whosTurn\r\n        });\r\n\r\n        this.checkForWinner(squares)\r\n    }\r\n    //props args to games got from app\r\n    onMakeMove = (index) => {\r\n        console.log(\"MOVE MADE\");\r\n        const squares = this.state.squares;\r\n\r\n        //check if empty and your turn\r\n        if (!squares[index] && (this.turn === this.props.piece)){\r\n            squares[index] = this.props.piece;\r\n\r\n            this.setState({\r\n                squares: squares,\r\n                whosTurn: !this.state.whosTurn\r\n            });\r\n\r\n            this.turn = (this.turn === 'X') ? 'O' : 'X';\r\n\r\n            this.props.pubnub.publish({\r\n                message: {\r\n                    index: index,\r\n                    piece: this.props.piece,\r\n                    turn: this.turn\r\n                },\r\n                channel: this.props.gameChannel\r\n            });\r\n\r\n            // CHeck if there is a winner\r\n\r\n            this.checkForWinner(squares)\r\n        }\r\n    }\r\n\r\n    checkForWinner = (squares) => {\r\n        // Possible winning combinations\r\n        const possibleCombinations = [\r\n          [0, 1, 2],\r\n          [3, 4, 5],\r\n          [6, 7, 8],\r\n          [0, 3, 6],\r\n          [1, 4, 7],\r\n          [2, 5, 8],\r\n          [0, 4, 8],\r\n          [2, 4, 6],\r\n        ];\r\n        // Iterate every combination to see if there is a match\r\n        for (let i = 0; i < possibleCombinations.length; i += 1) {\r\n          const [a, b, c] = possibleCombinations[i];\r\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            this.announceWinner(squares[a]);\r\n            return;\r\n          }\r\n        }\r\n            // Below the for loop in checkForWinner()\r\n    // Check if the game ends in a draw\r\n    this.counter++;\r\n    // The board is filled up and there is no winner\r\n    if(this.counter === 9){\r\n      this.gameOver = true;\r\n      this.newRound(null);\r\n    }\r\n      }\r\n\r\n\r\n    \r\n\r\n    // Update score for the winner\r\n    announceWinner = (winner) => {\r\n        let pieces = {\r\n          'X': this.state.xScore,\r\n          'O': this.state.oScore\r\n        }\r\n        if(winner === 'X'){\r\n          pieces['X'] += 1;\r\n          this.setState({\r\n            xScore: pieces['X']\r\n          });\r\n        }\r\n        else{\r\n          pieces['O'] += 1;\r\n          this.setState({\r\n            oScore: pieces['O']\r\n          });\r\n        }\r\n        // End the game once there is a winner\r\n        this.gameOver = true;\r\n        this.newRound(winner);  \r\n      }\r\n\r\n      newRound = (winner) => {\r\n        // Announce the winner or announce a tie game\r\n        let title = (winner === null) ? 'Tie game!' : `Player ${winner} won!`;\r\n        // Show this to Player O\r\n        if((this.props.isRoomCreator === false) && this.gameOver){\r\n          Swal.fire({  \r\n            position: 'top',\r\n            allowOutsideClick: false,\r\n            title: title,\r\n            text: 'Waiting for a new round...',\r\n            confirmButtonColor: 'rgb(208,33,41)',\r\n            width: 275,\r\n            customClass: {\r\n                heightAuto: false,\r\n                title: 'title-class',\r\n                popup: 'popup-class',\r\n                confirmButton: 'button-class',\r\n            } ,\r\n          });\r\n          this.turn = 'X'; // Set turn to X so Player O can't make a move \r\n        } \r\n        // Show this to Player X\r\n        else if(this.props.isRoomCreator && this.gameOver){\r\n          Swal.fire({      \r\n            position: 'top',\r\n            allowOutsideClick: false,\r\n            title: title,\r\n            text: 'Continue Playing?',\r\n            showCancelButton: true,\r\n            confirmButtonColor: 'rgb(208,33,41)',\r\n            cancelButtonColor: '#aaa',\r\n            cancelButtonText: 'Nope',\r\n            confirmButtonText: 'Yea!',\r\n            width: 275,\r\n            customClass: {\r\n                heightAuto: false,\r\n                title: 'title-class',\r\n                popup: 'popup-class',\r\n                confirmButton: 'button-class',\r\n                cancelButton: 'button-class'\r\n            } ,\r\n          }).then((result) => {\r\n            // Start a new round\r\n            if (result.value) {\r\n              this.props.pubnub.publish({\r\n                message: {\r\n                  reset: true\r\n                },\r\n                channel: this.props.gameChannel\r\n              });\r\n            }\r\n            else{\r\n              // End the game\r\n              this.props.pubnub.publish({\r\n                message: {\r\n                  endGame: true\r\n                },\r\n                channel: this.props.gameChannel\r\n              });\r\n            }\r\n          })      \r\n        }\r\n       }\r\n  \r\n  \r\n\r\n    render () {\r\n        let status;\r\n        status = `${this.state.whosTurn ? \"Your turn\": \"Opponent's turn\"}`;\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"board\">\r\n                <Board \r\n                    squares={this.state.squares}\r\n                    onClick={index =>this.onMakeMove(index)}\r\n                />\r\n                <p className=\"status-info\">{status}</p>\r\n                </div>\r\n\r\n                <div className=\"scores-container\">\r\n                <div>\r\n                    <p>Player X: {this.state.xScore}</p>\r\n                </div>\r\n                \r\n                <div>\r\n                    <p>Player O: {this.state.oScore}</p>\r\n                </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n//App.js\nimport React, { Component } from 'react';\nimport Game from './Game';\nimport Board from './Board';\nimport PubNub from 'pubnub';\n//broken import {usePubNub} from 'pubnub-react';\n//import PubNubReact from 'pubnub-react'\n//import {PubNubReact} from 'pubnub-react';\nimport Swal from \"sweetalert2\";  \nimport shortid  from 'shortid';\nimport './Game.css';\n\n\n// pubnub.addListener({\n//     status: function(statusEvent) {\n//         if (statusEvent.category === \"PNConnectedCategory\") {\n//             publishSampleMessage();\n//         }\n//     },\n//     message: function(msg) {\n//         console.log(msg.message.title);\n//         console.log(msg.message.description);\n//     },\n//     presence: function(presenceEvent) {\n//         // This is where you handle presence. Not important for now :)\n//     }\n// })\n\nconst LOBBY_STRING = \"tictactoelobby--\";\nconst GAME_STRING = \"tictactoegame--\";\nclass App extends Component {\n    constructor(props) { \n        super(props);\n        this.pubnub = new PubNub({\n            publishKey: \"pub-c-3d2acc0c-8090-4539-947a-c77a05dc8cf4\",\n            subscribeKey: \"sub-c-51720ec4-0b21-11eb-b978-f27038723aa3\"\n        });\n\n\n        /////game specific\n        this.state = {\n            piece: '', // X or O\n            isPlaying: false, //requires two players\n            isRoomCreator: false,\n            isDisabled: false,\n            myTurn: false,\n\n        };\n\n        this.lobbyChannel = null;\n        this.gameChannel = null;\n        this.roomId = null; //unique id for room\n\n        this.pubnub.addListener(\n            {\n            message: (msg) => {\n                console.log(msg)\n                console.log(\"fixed?\",msg.message.notRoomCreator);\n                if (msg.message.notRoomCreator){\n                    this.gameChannel = GAME_STRING + this.roomId;\n    \n                    this.pubnub.subscribe({\n                        channels: [this.gameChannel]\n                    });\n                    console.log(\"got thing\");\n                    this.setState({\n                        isPlaying: true\n                    });\n            \n                    //in case still open\n                    Swal.close();\n                }\n            }\n                \n            }\n        )\n\n        ///////////\n       // this.pubnub.init(this);//initialize pubnub\n    }\n    //at end\n    componentWillUnmount() {\n        this.pubnub.unsubscribe({\n          channels : [this.lobbyChannel, this.gameChannel]\n        });\n      }\n\n    //runs every update (builtin..)\n    // componentDidUpdate(){\n    // //check that someone is connected to a channel, if so listen\n    // if (this.lobbyChannel != null){\n    //     this.pubnub.getMessageActions(this.lobbyChannel, (msg) => {\n    //         console.log(msg)\n    //         console.log(\"hiiii\",msg.message.notRoomCreator);\n    //         if (msg.message.notRoomCreator){\n    //             this.gameChannel = GAME_STRING + this.roomId;\n\n    //             this.pubnub.subscribe({\n    //                 channels: [this.gameChannel]\n    //             });\n    //             console.log(\"got thing\");\n    //             this.setState({\n    //                 isPlaying: true\n    //             });\n        \n    //             //in case still open\n    //             Swal.close();\n    //         }\n    //     });\n\n     \n    // }\n    // }\n\n    //joining a channel\n    onPressJoin = (e) => {\n       Swal.fire({\n           position: 'top',\n           input: 'text',\n           allowOutsideClick: false,\n           inputPlaceholder: 'Enter the room id',\n           showCancelButton: true,\n           confirmButtonColor: 'rgb(208,33,41)',\n           confirmButtonText: 'OK',\n           width: 275,\n           padding: '0.7em',\n           customClass: {\n               heightAuto: 'popup-class',\n               confirmButton: 'join-button-class',\n               cancelButton: 'join-button-class'\n           }\n       }).then((result)=> {\n           // check if user typed a value\n           if(result.value){\n                this.joinRoom(result.value);\n           }\n       }) \n\n    }\n\n    joinRoom = (value) => {\n        this.roomId = value;\n        this.lobbyChannel = LOBBY_STRING + this.roomId;\n        //check number of people in channel\n        this.pubnub.hereNow({\n            channels: [this.lobbyChannel],\n        }).then((response) => {\n            console.log(\"currently broke\",response.totalOccupancy);\n            if (response.totalOccupancy < 2){\n            console.log('if',this.lobbyChannel);\n            //subscribe listens\n            this.pubnub.subscribe({\n                channels: [this.lobbyChannel],\n                withPresence: true\n            });\n            \n            this.setState({\n                piece: 'O', // Player 0\n            });\n            // send data that can be received with 'getMessage'\n            this.pubnub.publish({\n                message: {\n                    notRoomCreator: true,\n                },\n                channel: this.lobbyChannel\n            });\n        }\n        else {\n            console.log(\"else\");\n            Swal.fire({\n                position: 'top',\n                allowOutsideClick: false,\n                title: 'Error',\n                text: 'Game in progress, Try another room.',\n                width: 275,\n                padding: '0.7em',\n                customClass: {\n                    heightAuto: false,\n                    title: 'title-class',\n                    popup: 'popup-class',\n                    confirmButton: 'button-class'\n                }\n            })\n        }\n        }).catch((error) => {\n            console.log(error);\n        });\n\n        \n    }\n\n    //creating a room \n    onPressCreate = (e) => {\n        this.roomId = shortid.generate().substring(0,5);\n        this.lobbyChannel = LOBBY_STRING + this.roomId;\n        console.log(this.lobbyChannel);\n        this.pubnub.subscribe({\n            channels: [this.lobbyChannel],\n            withPresence: true //checks # people in channel\n        });\n\n        //sweetalert2 replaces javascripts default alert()\n        Swal.fire({\n            position: 'top',\n            allowOutsideClick: false,\n            title: 'Share this room ID with your friends',\n            text: this.roomId,\n            width: 275,\n            padding: '0.7em',\n            // Custom CSS to change the size of the model\n            customClass: {\n                heightAuto: false,\n                title: 'title-class',\n                popup: 'popup-class',\n                confirmButton: 'button-class'\n            }\n        });\n\n        this.setState({\n            piece: 'X',\n            isRoomCreator: true,\n            isDisabled: true, //disable 'create button'\n            myTurn: true, //player X makes first move\n        });\n    }\n\n        // Reset everything\n        endGame = () => {\n            this.setState({\n              piece: '',\n              isPlaying: false,\n              isRoomCreator: false,\n              isDisabled: false,\n              myTurn: false,\n            });\n            this.lobbyChannel = null;\n            this.gameChannel = null;\n            this.roomId = null;  \n            this.pubnub.unsubscribe({\n              channels : [this.lobbyChannel, this.gameChannel]\n            });\n          }\n\n    //vars used with {} in this case the && allows for bools\n    //can add arguments (props) to your html sections to get ex Board or Game\n    render() {\n        let status;\n        status = `${this.state.isPlaying ? \"Playing\": \"NotPlaying\"}`;\n        return(\n        <div>\n           <div className=\"title\">\n        <p> React Tic Tac Toe... {status} Current ID: {this.roomId}</p>\n            </div>\n            { \n                !this.state.isPlaying &&\n                <div className=\"game\">\n                    <div className=\"board\">\n                        <Board \n                            squares={0}\n                            onClick={index => null}\n                        />\n                    <div className=\"button-container\">\n                        <button\n                            className=\"create-button \"\n                            disabled={this.state.isDisabled}\n                            onClick={(e) => this.onPressCreate()}\n                            > Create\n                        </button>\n                        <button\n                            className=\"join-button\"\n                            onClick={(e) => this.onPressJoin()}\n                            >join\n                        </button>\n\n                    </div>\n                    </div>\n                </div>\n            }\n\n            {\n                this.state.isPlaying &&\n                <Game \n                    pubnub={this.pubnub}\n                    gameChannel={this.gameChannel}\n                    piece={this.state.piece}\n                    isRoomCreator={this.state.isRoomCreator}\n                    myTurn={this.state.myTurn}\n                    xUsername={this.state.xUsername}\n                    oUsername={this.state.oUsername}\n                    endGame={this.endGame}\n                />\n            }\n\n        </div>);\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}